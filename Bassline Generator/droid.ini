
# BEGIN DROIDCOMPONENT DESCRIPTION
# Automatic Techno Bassline 
# Version: 1
# OS: Blue 1

#Description of Droid Component
#########internal clock @ 135
#########Output clock
#########Output Reset
#########mute clock - when letting go of Mute send Reset
#########
#########buttongroup turn P1 to change tempo
#########
#########
#########
#########Kick SideChain
#########       Take Kick Trigger in
#########        make contour envelope
#########        Invert Contour Envelope
#########        Output envelope -- Mult it send to BBox's / 
#########                civilization and other VCA's for 
#########                 sidechaining (MMF)
#########
#########Bassline Generator
#########        use kick trigger to mask notes
# END DROIDCOMPONENT



# BEGIN DROIDCOMPONENT G8
# G1: [] 
# G2: [] 
# G3: [] 
# G4: [] 
# G5: [] 
# G6: [] 
# G7: [CLOCKOUT] 
# G8: [RESETOUT] 
# END DROIDCOMPONENT

# BEGIN DROIDCOMPONENT MASTER
# I1: [] 
# I2: [] 
# I3: [] 
# I4: [] 
# I5: [] 
# I6: [] 
# I7: [] 
# I8: [] 
# O1: [] 
# O2: [] 
# O3: [] 
# O4: [] 
# O5: [] 
# O6: [] 
# O7: [] 
# O8: [] 
# END DROIDCOMPONENT


#Variables:    Ex. G7: [CLOCKOUT]
# _GLOBAL_ACTIVITY Not being used yet
#: [_PATTERN_LENGTH_BASS] #not used yet, just fixed value for now
#: [_REROLL] # not used for now
#Variables


#BEGIN DROIDCOMPONENT P2B8

# P1.2: [P1.2] 
# B1.1: [B1.1] 
# B1.2: [B1.2] 
# B1.3: [B1.3] 
# B1.4: [B1.4] 
# B1.5: [B1.5] 
# B1.6: [B1.6] 
# B1.7: [B1.7] 
# B1.8: [B1.8] 
# END DROIDCOMPONENT

#BEGIN DROIDCOMPONENT P2B8

# B2.1: [B2.1] 
# B2.2: [B2.2] 
# B2.3: [B2.3] 
# B2.4: [B2.4] 
# B2.5: [B2.5] 
# B2.6: [B2.6] 
# B2.7: [B2.7] 
# B2.8: [B2.8] 
# END DROIDCOMPONENT

# BEGIN DROIDCOMPONENT P10
# P3.1: [P3.1] 
# P3.2: [P3.2] 
# P3.3: [P3.3] 
# P3.4: [P3.4] 
# P3.5: [P3.5] 
# P3.6: [P3.6] 
# P3.7: [P3.7] 
# P3.8: [P3.8] 
# P3.9: [P3.9] 
# P3.10: [P3.10] 
# END DROIDCOMPONENT

# ----------------------------------------------------------------------
# DROID Component Declarations
# ----------------------------------------------------------------------

[p2b8]
[p2b8]
#[p2b8]
[p10]
#[b32]
# ----------------------------------------------------------------------
# DROID Component Declarations
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# Input Mappings
# ----------------------------------------------------------------------

[copy] # g1: 
    input = G2
    output = _KICK_IN

[copy] # g1: 
    input = p1.1
    output = _PATTERN_ACTIVITY_BASS

[copy] # g1: 
    input = P1.2
    output = _BASS_DEJAVU

[copy] #  
    input = p2.1
    output = _GLOBAL_MORPH

[copy] # 
    input = p2.2
    output = _PATTERN_FILL_BASS

# ----------------------------------------------------------------------
# Input Mappings
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Clock Generator
# ----------------------------------------------------------------------
#with a momentary clock mute that resets all sequencers when released - except its not working
[button] # Mute clock button
    states = 1
    button = B2.8
    led = L2.8
    onvalue =  0
    offvalue = _CLOCKLFO
    output = _CLOCKGO
    
[contour] #contour for clock reset
    gate = B2.8
    decay = 0
    release = 0
    endofrelease = _CLOCKRESET
    
[lfo] # lfo to generate the clock
    hz =  2.1666666667  #+ P1.1 
    sync = _CLOCKRESET
    square = _CLOCKLFO

[clocktool] #Clock divider to 1/16th notes for internal droid sequencer
    clock =_CLOCKGO
    multiply = 4
    reset = _CLOCKRESET #or G8
    output = _CLOCK16 # Used internally

# ----------------------------------------------------------------------
# Clock Generator
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# Kick Sidechain
# ----------------------------------------------------------------------

[contour] #Could Tie the output attenuation to the level of the kick coming from Sweet16
    trigger = _KICK_IN #kick Trigger In
    #startfromzero = on
    attack = 0.3
    release = 0.8
    attackshape = 0.2
    releaseshape = 0.8
    inverted = _SIDECHAIN_OUT_ #* 0.95 Attenuate this output later
# ----------------------------------------------------------------------
# Kick Sidechain
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------




# ----------------------------------------------------------------------
# Voice 1 (bass)
# ----------------------------------------------------------------------
    
[random] #randomness for accents  
    clock = _CLOCK16
    minimum = 3V
    maximum = 5V
    steps = 5
    output = _RND_ACC

[algoquencer] # Turing Maschine like algoquencer
    clock = _CLOCK16
    activity = _PATTERN_ACTIVITY_BASS #+ _GLOBAL_ACTIVITY When More Voices are added add in a global activity
    morphs = _GLOBAL_MORPH
    length =  8 #_PATTERN_LENGTH_BASS
    pattern = 1
    #reset = _RESET
    #reroll = _REROLL #using Nexpattern for now
    nextpattern = L1.1 # is this right?
    fills = _PATTERN_FILL_BASS
    fillorder = 3
    dejavu = _BASS_DEJAVU #do I really need this?
    #mutebutton = B3.1 # no mutes for now -- not enough buttons
    #muteled = L3.1
    accenthigh = _RND_ACC
    accentlow = 0
    morphled = R1 # do I really Needs this
    gate = _ALGO_BASS_GATE
    trigger = _ALGO_TRIGGER
    accent = _BASS_ACC_OUT_
    pitch = _TM_CV

###########From Old Quantizer do I need this?
    #pitchlow = P3.1
   # pitchhigh = P3.1 + P3.2
 ###########   
 # S&H for root input   
#[sample]
    #input = 01 #_ROOTNOTE
   # gate = _BASS_ROOTON
   # output = _BASS_ROOTNOTE
   
# slew gate
[algoquencer]
    clock = _CLOCK16
    activity = _PATTERN_ACTIVITY_BASS * 0.1 + 0.1
    distribution = 0.8
    length = _PATTERN_LENGTH_BASS
    pattern = 3
    morphs = _GLOBAL_MORPH
    reroll = _REROLL
    reset = _RESET
    trigger = _SLEW_TRIGGER

# gate input and mix 
[logic] # Merge ALGOBASS and some other gates to the algoquencer
    input1 = _ALGO_BASS_GATE
    input2 = _PAD09
#    input3 = _ROOTEGATE
    or = _BASS_GATE


####################OLD QUANTIZER Buttons##############


#[button] #Used for Next Pattern Currently
  #  button = B1.1
   # led = L1.1

[button]
    button = B1.3
    led = L1.3
    onvalue = 7
    offvalue = 1
    output = _DEGREE

[button]
    button = B2.1
    led = L2.1

[button]
    button = B2.2
    led = L2.2

[button]
    button = B2.3
    led = L2.3

[button]
    button = B2.4
    led = L2.4

[button]
    button = B2.5
    led = L2.5

[button]
    button = B2.6
    led = L2.6

[button]
    button = B2.7
    led = L2.7

#[quantizer]
#    input = I2 / 5
#    steps = 12
#    output = _BASS_PITCH_OUT_


####################OLD QUANTIZER##############



# S&H and tuning 
[minifonion]
    input  = _TM_CV
    output = _BASS_PITCH
    root = 0 #_BASS_ROOTNOTE Can hook up a rootnote by using the sample and hold circuit
    degree = 9 #_DEGREE #changes the scales of minifonion
    select1 = L2.1
    select3 = L2.2
    select5 = L2.3
    select7 = L2.4
    select9 = L2.5
    select11 = L2.6
    select13 = L2.7
    #select1 = _BASS1
    #select3 = _BASS2 
    #select5 = _BASS3 
    #select7 = _BASS4 
    #select9 = _BASS5 
    #select11 = _BASS6 
    #select13 = _BASS7 
    #tuningmode = _TUNINGON
    #tuningpitch = _TUNINGPITCH
    trigger = _BASS_GATE
    notechange = _NOTE_CHANGE
    
[fold]
    input = _BASS_PITCH
    output = _SLEW_PITCH
    foldby = 1V # one octave
    minimum = 0V
    maximum = 3V

[logic]
    input1 = _ALGO_TRIGGER
    input2 = _SLEW_TRIGGER
    input3 = _NOTE_CHANGE
    and = _SLEW_LOGIC
    
[clocktool]
    clock = _SLEW_LOGIC
    gatelength = _SLEW_TIME
    output = _SLEW_GATE
    
# slew pitch with gate
[slew]
    input = _SLEW_PITCH
    slew = _SLEW_TIME * 0.5
    scurve = _BASS_PITCH_OUT_
    gate =  _SLEW_GATE
    
[logic]
    input1 = _BASS_GATE
    input2 = _SLEW_GATE
    or = _BASS_GATE_OUT



# ----------------------------------------------------------------------
# Voice 1 (bass)
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Output Mappings
# ----------------------------------------------------------------------

[copy] # g1: 
    input = _BASS_GATE_OUT
    output = G1

[copy] # g7: 
    input = _CLOCK16
    output = G7
[copy] # g8: 
    input = _RESET
    output = G8

[copy] # g8: 
    input = _BASS_PITCH_OUT_
    output = O3
[copy] # g8: 
    input = _BASS_ACC_OUT_
    output = O4

[copy] # g8: 
    input = _SIDECHAIN_OUT_
    output = O5


# ----------------------------------------------------------------------
# Output Mappings
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------